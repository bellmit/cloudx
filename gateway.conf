# 网关配置，之所以不用XML/JSON，原因在于
# 1、网关开发是开箱即用，即使是自定义开发也是以插件化的方式来加载，不需要开发介入很多
# 2、参考nginx配置文件格式更利于运维的部署，统一运维配置习惯
# 3、采用此配置格式，注释和配置都很清晰，能够一眼看出每个网关业务背后的微服务及对应的拦截器配置

# 网络相关配置
network {
    # 多少个EventLoop轮询器，主要用于处理各自网络读写数据
    # 当服务性能不足可提高此配置提升对网络IO的并发处理，但注意EventLoop业务层必须要做到异步，不能有同步阻塞请求
    num_of_group 8;
    # 半连接队列数
    backlog 2048;
    # 开启此参数，那么客户端在每次发送数据时，无论数据包的大小都会将这些数据发送出去
    tcp_nodelay on;
}

# 日志相关配置
log {
    # 日志输出级别，可为FATAL（致命）、ERROR（错误）、WARN（警告）、INFO（信息）、DEBUG（调试）、TRACE（追踪）、OFF（关闭）
    log_level trace;
    # 日志输出终端，可为CONSOLE（控制台）、FILE（文件）
    log_appender console;
    # 日志的存储路径，前提是logAppender配置为FILE
    log_path C:\log;
    # 日志输出模板
    log_format '%d(yyyy-MM-dd HH:mm:ss) %P %m%n%e';
}

# 网关拦截器配置
preaccess generic-interceptor {
    # 拦截器定义，一个配置对应一个拦截器实例
    # 请求鉴权拦截器，业务方必须提供APP-ID和TOKEN的HEADER头才允许请求到网关后端
    interceptor auth {
        interceptor_name auth_token_interceptor;
        interceptor_arg salt RkBpc2Mw;
    }
    # 服务熔断限流拦截器
    interceptor guard {
        interceptor_name guard_interceptor;
        interceptor_arg resource 'FlowQps';
        interceptor_arg limit_key '$remote_addr:$request';
         # 请求限速速率，限制每秒20个请求
        interceptor_arg rate 20;
        interceptor_arg control_behavior Reject;
    }
}

# 全局网关拦截器配置，所有请求均会通过此拦截器
access {
    # 日志输出拦截器，一般放置在最后
    interceptor logger {
        # 拦截器类名，如果是底层组件即在cloud.apposs.gateway.interceptor包下则直接写类名即可
        interceptor_name logger_interceptor;
        # 拦截器参数列表
        interceptor_arg enable on;
        interceptor_arg format '$remote_addr:$remote_port $host $request $status "$http_user_agent"';
    }
}

# 反向代理服务列表，主要用于location块proxy_pass使用
upstream service-product {
    server 106.75.159.44:80;
    server 106.75.159.45:80;
}

# http区块，配置文件仅有一个http块
http {
    # 监听主机和端口
    listen 0.0.0.0 8882;
    # 网关服务编码
    charset utf-8;
    tcp_nodelay on;
    show_banner on;

    # 每个后端业务的网关配置
    # 一个http区块可以拥有多个server块，一个server代表一个业务项目，一个location代表一个微服务实例(集群)
    # 除非服务器资源有限，否则每个网关服务的设计原则是最好只有一个server块，
    # 即每个网关只服务一个业务项目，保证网关的性能和简洁
    server {
        # 匹配所有HOST
        server_name *;
        # 非微服务转发，直接读取目录文件并输出
        location / {
            default_type text/html;
            root C:/html;
            index index.html;
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
        }
        # 非微服务转发，直接读取目录文件并输出
        location /index2.html {
            default_type text/html;
            root C:/html;
            index index.html;
            interceptor_chain generic-interceptor;
        }
        # 微服务转发，转发到对应后端web服务列表
        location /product {
            # 配置反向代理到service-product集群
            proxy_pass http://service-product;
            proxy_set_header PROXY_TYPE 1;
        }
        location /user {
            # 配置反向代理到service-product集群
            proxy_pass http://service-product;
            proxy_set_header PROXY_TYPE 1;
        }
        # 也支持直接反向代理到指定网站
        location /website {
            # 配置反向代理到某个网站
            site_pass http://www.baidu.com/;
        }
        # 直接返回内容
        location /d2Vic2l0ZQ== {
            default_type text/html;
            return 502 '{"status":502, "msg":"服务正在升级，请稍后再试……"}';
        }
    }
    server {
        server_name portal.api.apposs.com;
        location /vfile {
            root vfile;
        }
    }
}
